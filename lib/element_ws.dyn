{#def]WebSocket[#,]addr[192.168.99.100][#,]port[9292]
[#=]ws_js_code[
var Socket = window.MozWebSocket || window.WebSocket,
protos = ['dyndoc', 'xmpp'],
socket = new Socket('ws://#{addr}:#{port}/', protos);

var dyndoc_startup_code={};

//TODO: maybe need to run over dyndoc_startup_code keys to initialize any code!
var open_cmd = function(cmd,id) {
  add_startup_code(cmd,id);//This allows to add some further command and not only one command
  socket.addEventListener('open', function() {
    send_dyndoc_cmd(dyndoc_startup_code[id],id);
  });
};

var add_startup_code= function(cmd,id) {
  //console.log("here:"+dyndoc_startup_code[id]);
  if(typeof(dyndoc_startup_code[id]) === "undefined") {
    dyndoc_startup_code[id]="";
  }
  dyndoc_startup_code[id]=dyndoc_startup_code[id]+cmd;
  //console.log("here2:"+dyndoc_startup_code[id]);
};

var send_dyndoc_cmd = function(content,id) {
  if (typeof(id)==='undefined') id = "";
  //console.log("content:"+content);
  socket.send('__send_cmd__[[dyndoc'+id+']]__' + content + '__[[WS_END_TOKEN]]__');
};

var send_cmd = function(cmd,id,content) {
  if (typeof(id)==='undefined') id = "";
  else if(id != "") id = "#"+id;
  socket.send('__send_cmd__[['+cmd+id+']]__' + content + '__[[WS_END_TOKEN]]__');
};

var get_content = function(res) {
  var data=res.split('__[[WS_END_TOKEN]]__');
  last=data.pop();
  result = data.join("");
  regexp = /^__send_cmd__\[\[([a-zA-Z0-9_]*)((?:\#|\:)[^\]]*)?\]\]__([\s\S]*)/m;
  res = result.match(regexp);
  if(res[1] === "dyndoc") {
    if(typeof(res[2]) === "undefined") {
      return res[3];
    } else {
      $(res[2]).html(res[3]);
    }
  } else if( res[1].substring(0, 7) === "jquery_" ) {
    var cmd=res[1].substring(7);
    if(cmd.substring(0,5) === "json_") {//json arguments
      cmd=cmd.substring(5);
      if(res[2] === "" || (typeof(res[2]) === "undefined")) { //no # in the second part of the cmd
        $[cmd].apply(null,JSON.parse(res[3])); //$["notify"].apply(null,JSON.parse('[{"title": "ti","message": "hello"},{"delay": 500,"placement": {"from": "top","align": "center"} }]'));
      } else {
        var obj=$(res[2]);
        obj[cmd].apply(obj,JSON.parse(res[3]));
      }
    } else {
      if(typeof(res[2]) === "undefined") { //no # in the second part of the cmd
        $[cmd](res[3]);
      } else {
        $(res[2])[cmd](res[3]); //call of function by name!
      }
    }
  }
};

//TODO: log to a true logger!
//var log = function(text) {
//  $("#content").html(text);
//};

socket.onerror = function(event) {
  console.log('ERROR: ' + event.message);
};

socket.onmessage = function(event) {
  get_content(event.data);
};

socket.onclose = function(event) {
  console.log('CLOSE: ' + event.code + ', ' + event.reason);
};
]
[#rb<]
LayoutMngr << [:js_code,#{=ws_js_code}]
[#def}
